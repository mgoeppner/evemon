diff --git a/src/EVEMon/Controls/Overview.cs b/src/EVEMon/Controls/Overview.cs
index a5b6a388..1efb5594 100644
--- a/src/EVEMon/Controls/Overview.cs
+++ b/src/EVEMon/Controls/Overview.cs
@@ -11,6 +11,8 @@ using EVEMon.Common.Enumerations.UISettings;
 using EVEMon.Common.Extensions;
 using EVEMon.Common.Factories;
 using EVEMon.Common.Models;
+using EVEMon.Common.Notifications;
+using EVEMon.Common.SettingsObjects;
 
 namespace EVEMon.Controls
 {
@@ -142,7 +144,7 @@ namespace EVEMon.Controls
                 characters.AddRange(EveMonClient.MonitoredCharacters);
 
             int index = 0;
-            
+
             foreach (Character character in characters)
             {
                 // Retrieve the current overview item, or null if we're past the limits
@@ -163,6 +165,18 @@ namespace EVEMon.Controls
                     overviewItems.Insert(index, overviewItem);
                 }
 
+                Int32 badgeCount = EveMonClient.Notifications.Where(p => character.Equals(p.SenderCharacter) && p.Category != NotificationCategory.MarketOrdersEnding).Distinct().Count();
+
+                System.Diagnostics.Debug.WriteLine($"{character.Name} - {badgeCount}");
+                Label badge = (Label)overviewItems[index].Controls.Find("badge", true)[0];
+
+                badge.Visible = badgeCount != 0;
+                badge.Text = $"{badgeCount}";
+
+                MainWindowSettings mainWindowSettings = Settings.UI.MainWindow;
+                PortraitSizes portraitSize = mainWindowSettings.OverviewItemSize;
+                badge.Left = portraitSize.GetDefaultValue() - badge.Width + 3;
+
                 // Remove processed character from the dictionary and move forward
                 if (character != null)
                     items.Remove(character);
@@ -311,9 +325,9 @@ namespace EVEMon.Controls
 
                 // Computes the vertical margin
                 height -= Pad;
-                
+
                 // We put 1/3 at the top, 2/3 at the bottom
-                int marginV = Math.Max(0, (clientHeight - height) / 3); 
+                int marginV = Math.Max(0, (clientHeight - height) / 3);
 
                 // Adjust the controls bounds
                 rowIndex = 0;
